name: Build and release

on:
  pull_request:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest  # For a list of available runner types, refer to
                            # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Pre_Release: ${{ contains(github.ref, 'dev') }}
      Solution_Name: MKVStudio.sln
      Project_Name: MKVStudio/MKVStudio.csproj
      # Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

# Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

# Install GitVersion
      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.11
        with:
          versionSpec: '5.x'

# Use GitVersion
      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.11
        with:
          useConfigFile: true
          configFilePath: ".github/GitVersion.yml"
      - run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

# Restore NuGet
      - name: Restore NuGet with dotnet
        run: dotnet restore $env:Solution_Name
      
# Execute all unit tests in the solution    
      - name: Tests
        run: dotnet test $env:Solution_Name /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} /p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} /p:InformationalVersion=${{ steps.gitversion.outputs.Sha }}

# Publish
      - name: Publish
        run: dotnet publish $env:Project_Name --configuration release /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} /p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} /p:InformationalVersion=${{ steps.gitversion.outputs.Sha }}

# 7zip
      - name: 7Zip
        run: 7z a -t7z -mx=9 MKVStudio.7z ./MKVStudio/bin/release/net5.0-windows/publish/*
        
# Upload artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "MKVStudio-${{ steps.gitversion.outputs.fullSemVer }}"
          path: MKVStudio.7z

# Create changelog
      - name: Changelog
        uses: Bullrich/generate-release-changelog@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}

# Upload to release
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: MKVStudio.7z
          asset_name: MKVStudio.7z
          release_name: "${{ steps.gitversion.outputs.MajorMinorPatch }}"
          tag: "${{ steps.gitversion.outputs.MajorMinorPatch }}"
          overwrite: true
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          prerelease: $env:Pre_Release
